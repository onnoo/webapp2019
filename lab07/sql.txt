CREATE DATABASE college;

USE college;

CREATE TABLE student(
    student_id INTEGER NOT NULL PRIMARY KEY,
    name VARCHAR(10) NOT NULL,
    year TINYINT NOT NULL DEFAULT 1,
    dept_no INT NOT NULL,
    major VARCHAR(20)
);

CREATE TABLE department(
    dept_no INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,
    dept_name VARCHAR(20) NOT NULL UNIQUE,
    office VARCHAR(20) NOT NULL,
    office_tel VARCHAR(13)
);

ALTER TABLE student CHANGE COLUMN major major VARCHAR(32);
ALTER TABLE student CHANGE COLUMN name name VARCHAR(15);
ALTER TABLE department CHANGE COLUMN dept_name dept_name VARCHAR(40) NOT NULL UNIQUE;
ALTER TABLE department CHANGE COLUMN office office VARCHAR(25) NOT NULL;
ALTER TABLE student ADD COLUMN gender VARCHAR(15) NOT NULL;

ALTER TABLE student DROP COLUMN gender;

-- Ex 2
INSERT INTO student VALUES (20070002, "Jane Smith", 3, 4, "Business Administration");
INSERT INTO student VALUES (20060001, 'Ashley Jackson', 4, 4, "Business Administration");
INSERT INTO student VALUES (20030001, "Liam Johnson", 4, 2, "Electrical Engineering");
INSERT INTO student VALUES (20040003, "Jacob Lee", 3, 2, "Electrical Engineering");
INSERT INTO student VALUES (20060002, "Noah Kim", 3, 1, "Computer Science");
INSERT INTO student VALUES (20100002, "Ava Lim", 3, 4, "Business Administration");
INSERT INTO student VALUES (20110001, "Emma Watson", 2, 1, "Computer Science");
INSERT INTO student VALUES (20080003, "Lisa Maria", 4, 3, "Law");
INSERT INTO student VALUES (20040002, "Jacob William", 4, 5, "Law");
INSERT INTO student VALUES (20070001, "Emily Rose", 4, 4, "Business Administration");
INSERT INTO student VALUES (20100001, "Ethan Hunt", 3, 4, "Business Administration");
INSERT INTO student VALUES (20110002, "Jason Mraz", 2, 1, "Electrical Engineering");
INSERT INTO student VALUES (20030002, "John Smith", 5, 1, "Computer Science");
INSERT INTO student VALUES (20070003, "Sophia Park", 4, 3, "Law");
INSERT INTO student VALUES (20070007, "James Michael", 2, 4, "Business Administration");
INSERT INTO student VALUES (20100003, "James Bond", 3, 1, "Computer Science");
INSERT INTO student VALUES (20070005, "Olivia Madison", 2, 5, "English Language and Literature");

INSERT INTO department (dept_name, office, office_tel) VALUES ("Computer Science", "Science Building 101", "02-3290-0123");
INSERT INTO department (dept_name, office, office_tel) VALUES ("Electrical Engineering", "Engineering Building 401", "02-3290-2345");
INSERT INTO department (dept_name, office, office_tel) VALUES ("Law", "Law Building 201", "02-3290-7896");
INSERT INTO department (dept_name, office, office_tel) VALUES ("Business Administration", "Business Building 104", "02-3290-1112");
INSERT INTO department (dept_name, office, office_tel) VALUES ("English Language and Literature", "Language Building 303", "02-3290-4412");

-- Ex 3
UPDATE department SET dept_name = "Electrical and Electronics Engineering" WHERE dept_name = "Electrical Engineering";
INSERT INTO department (dept_name, office, office_tel) VALUES ("Special Education", "Education Building 403", "02-3290-2347");
UPDATE student SET dept_no = 6 WHERE name = "Emma Watson";
DELETE FROM student WHERE name = "Jason Mraz";
DELETE FROM student WHERE name = "John Smith";

-- Ex 4
SELECT * FROM student WHERE major = "Computer Science";
SELECT student_id, year, major FROM student;
SELECT * FROM student WHERE year = 3;
SELECT * FROM student WHERE year = 1 OR year = 2;
SELECT * FROM student WHERE dept_no = (SELECT dept_no FROM department WHERE dept_name = "Business Administration");

-- Ex 5
SELECT * FROM student WHERE student_id LIKE "%2007%";
SELECT * FROM student ORDER BY student_id;
SELECT major FROM student GROUP BY major HAVING AVG(year) > 3;
SELECT * FROM student WHERE major = "Business Administration" AND student_id LIKE "%2007%" LIMIT 2;

-- Ex 6
SELECT role
    FROM roles r
        JOIN movies m ON r.movie_id = m.id
    WHERE m.name = "Pi";

SELECT first_name, last_name, r.role
    FROM actors a
        JOIN roles r ON a.id = r.actor_id
        JOIN movies m ON r.movie_id = m.id
    WHERE m.name = "Pi";

SELECT first_name, last_name
    FROM actors a
        JOIN roles r ON a.id = r.actor_id
        JOIN movies m ON r.movie_id = m.id
    WHERE m.name = "Kill Bill: Vol. 1" AND
    a.id IN (SELECT a.id FROM actors a
        JOIN roles r ON a.id = r.actor_id
        JOIN movies m ON r.movie_id = m.id
        WHERE m.name = "Kill Bill: Vol. 2");

SELECT first_name, last_name, COUNT(r.actor_id)
FROM actors a
    JOIN roles r ON a.id = r.actor_id
    GROUP BY a.id
    ORDER BY COUNT(r.actor_id) DESC
    LIMIT 7;

SELECT mg.genre, COUNT(m.id)
FROM movies_genres mg
    JOIN movies m ON mg.movie_id = m.id
    GROUP BY mg.genre
    ORDER BY COUNT(m.id) DESC
    LIMIT 3;

SELECT first_name, last_name, COUNT(m.id)
    FROM movies m
    JOIN movies_genres mg ON m.id = mg.movie_id
    JOIN movies_directors md ON m.id = md.movie_id
    JOIN directors d ON md.director_id = d.id
    WHERE mg.genre = 'Thriller'
    GROUP BY d.id
    ORDER BY COUNT(m.id) DESC;

-- Ex 7
SELECT grade
FROM grades g
    JOIN courses c ON g.course_id = c.id
WHERE c.name = "Computer Science 143";

SELECT s.name
FROM students s
    JOIN grades g ON s.id = g.student_id
    JOIN courses c ON g.course_id = c.id
WHERE
    c.name =  "Computer Science 143"
    AND g.grade <= "B-";

SELECT s.name, c.name, g.grade
FROM students s
    JOIN grades g ON s.id = g.student_id
    JOIN courses c ON g.course_id = c.id
WHERE
    g.grade <= "B-";

SELECT c.name, COUNT(s.id)
FROM students s
    JOIN grades g ON s.id = g.student_id
    JOIN courses c ON g.course_id = c.id
GROUP BY c.id
HAVING COUNT(s.id) >= 2;
